apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
    app.kubernetes.io/name: '{{ include "name" . | quote }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
    helm.sh/chart: '{{ include "chart" . | quote }}'
  name: crd-controller
  namespace: '{{ .Release.Namespace }}'
rules:
  - apiGroups:
      - source.toolkit.fluxcd.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - kustomize.toolkit.fluxcd.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - helm.toolkit.fluxcd.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - notification.toolkit.fluxcd.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - configmaps
      - configmaps/status
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
    app.kubernetes.io/name: '{{ include "name" . | quote }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
    helm.sh/chart: '{{ include "chart" . | quote }}'
  name: crd-controller
  namespace: '{{ .Release.Namespace }}'
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: crd-controller
subjects:
  - kind: ServiceAccount
    name: default
    namespace: '{{ .Release.Namespace }}'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
    app.kubernetes.io/name: '{{ include "name" . | quote }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
    helm.sh/chart: '{{ include "chart" . | quote }}'
  name: cluster-reconciler
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: default
    namespace: '{{ .Release.Namespace }}'
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
    app.kubernetes.io/name: '{{ include "name" . | quote }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
    control-plane: controller
    helm.sh/chart: '{{ include "chart" . | quote }}'
  name: notification-controller
  namespace: '{{ .Release.Namespace }}'
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app: notification-controller
    app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
    app.kubernetes.io/name: '{{ include "name" . | quote }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
    helm.sh/chart: '{{ include "chart" . | quote }}'
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
    app.kubernetes.io/name: '{{ include "name" . | quote }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
    control-plane: controller
    helm.sh/chart: '{{ include "chart" . | quote }}'
  name: source-controller
  namespace: '{{ .Release.Namespace }}'
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app: source-controller
    app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
    app.kubernetes.io/name: '{{ include "name" . | quote }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
    helm.sh/chart: '{{ include "chart" . | quote }}'
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
    app.kubernetes.io/name: '{{ include "name" . | quote }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
    control-plane: controller
    helm.sh/chart: '{{ include "chart" . | quote }}'
  name: webhook-receiver
  namespace: '{{ .Release.Namespace }}'
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http-webhook
  selector:
    app: notification-controller
    app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
    app.kubernetes.io/name: '{{ include "name" . | quote }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
    helm.sh/chart: '{{ include "chart" . | quote }}'
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
    app.kubernetes.io/name: '{{ include "name" . | quote }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
    control-plane: controller
    helm.sh/chart: '{{ include "chart" . | quote }}'
  name: helm-controller
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: helm-controller
      app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
      app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
      app.kubernetes.io/name: '{{ include "name" . | quote }}'
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: helm-controller
        app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
        app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
        app.kubernetes.io/name: '{{ include "name" . | quote }}'
        app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
        helm.sh/chart: '{{ include "chart" . | quote }}'
    spec:
      containers:
        - args:
            - --events-addr=http://notification-controller/
            - --watch-all-namespaces
            - --log-level=info
            - --log-json
            - --enable-leader-election
          env:
            - name: RUNTIME_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: '{{ .Values.images.registry }}/{{ .Values.images.helm_controller.image }}:v0.4.4'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
          name: manager
          ports:
            - containerPort: 8080
              name: http-prom
            - containerPort: 9440
              name: healthz
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /readyz
              port: healthz
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /tmp
              name: temp
      terminationGracePeriodSeconds: 600
      volumes:
        - emptyDir: {}
          name: temp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
    app.kubernetes.io/name: '{{ include "name" . | quote }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
    control-plane: controller
    helm.sh/chart: '{{ include "chart" . | quote }}'
  name: image-automation-controller
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: image-automation-controller
      app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
      app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
      app.kubernetes.io/name: '{{ include "name" . | quote }}'
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: image-automation-controller
        app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
        app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
        app.kubernetes.io/name: '{{ include "name" . | quote }}'
        app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
        helm.sh/chart: '{{ include "chart" . | quote }}'
    spec:
      containers:
        - args:
            - --events-addr=http://notification-controller/
            - --watch-all-namespaces
            - --log-level=info
            - --log-json
            - --enable-leader-election
          env:
            - name: RUNTIME_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: '{{ .Values.images.registry }}/{{ .Values.images.image_automation_controller.image }}:v0.2.0'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
          name: manager
          ports:
            - containerPort: 8080
              name: http-prom
            - containerPort: 9440
              name: healthz
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /readyz
              port: healthz
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /tmp
              name: temp
      terminationGracePeriodSeconds: 10
      volumes:
        - emptyDir: {}
          name: temp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
    app.kubernetes.io/name: '{{ include "name" . | quote }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
    control-plane: controller
    helm.sh/chart: '{{ include "chart" . | quote }}'
  name: image-reflector-controller
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: image-reflector-controller
      app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
      app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
      app.kubernetes.io/name: '{{ include "name" . | quote }}'
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: image-reflector-controller
        app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
        app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
        app.kubernetes.io/name: '{{ include "name" . | quote }}'
        app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
        helm.sh/chart: '{{ include "chart" . | quote }}'
    spec:
      containers:
        - args:
            - --events-addr=http://notification-controller/
            - --watch-all-namespaces
            - --log-level=info
            - --log-json
            - --enable-leader-election
          env:
            - name: RUNTIME_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: '{{ .Values.images.registry }}/{{ .Values.images.image_reflector_controller.image }}:v0.1.0'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
          name: manager
          ports:
            - containerPort: 8080
              name: http-prom
            - containerPort: 9440
              name: healthz
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /readyz
              port: healthz
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /tmp
              name: temp
            - mountPath: /data
              name: data
      terminationGracePeriodSeconds: 10
      volumes:
        - emptyDir: {}
          name: temp
        - emptyDir: {}
          name: data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
    app.kubernetes.io/name: '{{ include "name" . | quote }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
    control-plane: controller
    helm.sh/chart: '{{ include "chart" . | quote }}'
  name: kustomize-controller
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kustomize-controller
      app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
      app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
      app.kubernetes.io/name: '{{ include "name" . | quote }}'
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: kustomize-controller
        app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
        app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
        app.kubernetes.io/name: '{{ include "name" . | quote }}'
        app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
        helm.sh/chart: '{{ include "chart" . | quote }}'
    spec:
      containers:
        - args:
            - --events-addr=http://notification-controller/
            - --watch-all-namespaces
            - --log-level=info
            - --log-json
            - --enable-leader-election
          env:
            - name: RUNTIME_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: '{{ .Values.images.registry }}/{{ .Values.images.kustomize_controller.image }}:v0.5.3'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
          name: manager
          ports:
            - containerPort: 8080
              name: http-prom
            - containerPort: 9440
              name: healthz
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /readyz
              port: healthz
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /tmp
              name: temp
      securityContext:
        fsGroup: 1337
      terminationGracePeriodSeconds: 60
      volumes:
        - emptyDir: {}
          name: temp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
    app.kubernetes.io/name: '{{ include "name" . | quote }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
    control-plane: controller
    helm.sh/chart: '{{ include "chart" . | quote }}'
  name: notification-controller
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notification-controller
      app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
      app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
      app.kubernetes.io/name: '{{ include "name" . | quote }}'
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: notification-controller
        app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
        app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
        app.kubernetes.io/name: '{{ include "name" . | quote }}'
        app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
        helm.sh/chart: '{{ include "chart" . | quote }}'
    spec:
      containers:
        - args:
            - --watch-all-namespaces
            - --log-level=info
            - --log-json
            - --enable-leader-election
          env:
            - name: RUNTIME_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: '{{ .Values.images.registry }}/{{ .Values.images.notification_controller.image }}:v0.5.0'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
          name: manager
          ports:
            - containerPort: 9090
              name: http
            - containerPort: 9292
              name: http-webhook
            - containerPort: 8080
              name: http-prom
            - containerPort: 9440
              name: healthz
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /readyz
              port: healthz
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /tmp
              name: temp
      terminationGracePeriodSeconds: 10
      volumes:
        - emptyDir: {}
          name: temp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
    app.kubernetes.io/name: '{{ include "name" . | quote }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
    control-plane: controller
    helm.sh/chart: '{{ include "chart" . | quote }}'
  name: source-controller
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: source-controller
      app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
      app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
      app.kubernetes.io/name: '{{ include "name" . | quote }}'
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: source-controller
        app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
        app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
        app.kubernetes.io/name: '{{ include "name" . | quote }}'
        app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
        helm.sh/chart: '{{ include "chart" . | quote }}'
    spec:
      containers:
        - args:
            - --events-addr=http://notification-controller/
            - --watch-all-namespaces
            - --log-level=info
            - --log-json
            - --enable-leader-election
            - --storage-path=/data
            - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
          env:
            - name: RUNTIME_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: '{{ .Values.images.registry }}/{{ .Values.images.source_controller.image }}:v0.5.6'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              port: http
          name: manager
          ports:
            - containerPort: 9090
              name: http
            - containerPort: 8080
              name: http-prom
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 50m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /tmp
              name: tmp
      terminationGracePeriodSeconds: 10
      volumes:
        - emptyDir: {}
          name: data
        - emptyDir: {}
          name: tmp
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
    app.kubernetes.io/name: '{{ include "name" . | quote }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
    helm.sh/chart: '{{ include "chart" . | quote }}'
  name: allow-scraping
  namespace: '{{ .Release.Namespace }}'
spec:
  ingress:
    - from:
        - namespaceSelector: {}
      ports:
        - port: 8080
          protocol: TCP
  podSelector: {}
  policyTypes:
    - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
    app.kubernetes.io/name: '{{ include "name" . | quote }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
    helm.sh/chart: '{{ include "chart" . | quote }}'
  name: allow-webhooks
  namespace: '{{ .Release.Namespace }}'
spec:
  ingress:
    - from:
        - namespaceSelector: {}
  podSelector:
    matchLabels:
      app: notification-controller
      app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
      app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
      app.kubernetes.io/name: '{{ include "name" . | quote }}'
  policyTypes:
    - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name | quote }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service | quote }}'
    app.kubernetes.io/name: '{{ include "name" . | quote }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion | quote }}'
    helm.sh/chart: '{{ include "chart" . | quote }}'
  name: deny-ingress
  namespace: '{{ .Release.Namespace }}'
spec:
  ingress:
    - from:
        - podSelector: {}
  podSelector: {}
  policyTypes:
    - Ingress
