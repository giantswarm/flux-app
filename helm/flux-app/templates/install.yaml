apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: helm-controller
  namespace: '{{ .Release.Namespace }}'
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: image-automation-controller
  namespace: '{{ .Release.Namespace }}'
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: image-reflector-controller
  namespace: '{{ .Release.Namespace }}'
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: kustomize-controller
  namespace: '{{ .Release.Namespace }}'
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: notification-controller
  namespace: '{{ .Release.Namespace }}'
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: source-controller
  namespace: '{{ .Release.Namespace }}'
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: '{{ printf "%s-pvc-psp" (include "name" .) }}'
spec:
  allowPrivilegeEscalation: false
  fsGroup:
    ranges:
      - max: 65535
        min: 1
    rule: MustRunAs
  privileged: false
  runAsUser:
    rule: MustRunAsNonRoot
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
      - max: 65535
        min: 1
    rule: MustRunAs
  volumes:
    - emptyDir
    - secret
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: crd-controller
rules:
  - apiGroups:
      - source.toolkit.fluxcd.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - kustomize.toolkit.fluxcd.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - helm.toolkit.fluxcd.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - notification.toolkit.fluxcd.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - image.toolkit.fluxcd.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - namespaces
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - ""
    resources:
      - configmaps
      - configmaps/status
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - policy
    resourceNames:
      - '{{ printf "%s-pvc-psp" (include "name" .) }}'
    resources:
      - podsecuritypolicies
    verbs:
      - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: cluster-reconciler
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: kustomize-controller
    namespace: '{{ .Release.Namespace }}'
  - kind: ServiceAccount
    name: helm-controller
    namespace: '{{ .Release.Namespace }}'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: crd-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: crd-controller
subjects:
  - kind: ServiceAccount
    name: kustomize-controller
    namespace: '{{ .Release.Namespace }}'
  - kind: ServiceAccount
    name: helm-controller
    namespace: '{{ .Release.Namespace }}'
  - kind: ServiceAccount
    name: source-controller
    namespace: '{{ .Release.Namespace }}'
  - kind: ServiceAccount
    name: notification-controller
    namespace: '{{ .Release.Namespace }}'
  - kind: ServiceAccount
    name: image-reflector-controller
    namespace: '{{ .Release.Namespace }}'
  - kind: ServiceAccount
    name: image-automation-controller
    namespace: '{{ .Release.Namespace }}'
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    control-plane: controller
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: notification-controller
  namespace: '{{ .Release.Namespace }}'
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app: notification-controller
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    control-plane: controller
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: source-controller
  namespace: '{{ .Release.Namespace }}'
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app: source-controller
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    control-plane: controller
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: webhook-receiver
  namespace: '{{ .Release.Namespace }}'
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http-webhook
  selector:
    app: notification-controller
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    giantswarm.io/monitoring-path: /metrics
    giantswarm.io/monitoring-port: "8080"
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    giantswarm.io/monitoring: "true"
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: '{{ .Release.Name  }}-monitoring'
  namespace: '{{ .Release.Namespace }}'
spec:
  clusterIP: None
  ports:
    - port: 8080
      protocol: TCP
      targetPort: '{{ .Values.upstreamMetricsPort }}'
  selector:
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: helm-controller
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    control-plane: controller
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: helm-controller
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: helm-controller
      app.kubernetes.io/instance: '{{ .Release.Name }}'
      app.kubernetes.io/managed-by: '{{ .Release.Service }}'
      app.kubernetes.io/name: '{{ include "name" . }}'
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: helm-controller
        app.kubernetes.io/instance: '{{ .Release.Name }}'
        app.kubernetes.io/managed-by: '{{ .Release.Service }}'
        app.kubernetes.io/name: '{{ include "name" . }}'
        app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
        giantswarm.io/service_type: managed
        helm.sh/chart: '{{ include "chart" . }}'
    spec:
      containers:
        - args:
            - --events-addr=http://notification-controller/
            - --watch-all-namespaces
            - --log-level=info
            - --log-encoding=json
            - --enable-leader-election
          env:
            - name: RUNTIME_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: '{{ .Values.images.registry }}/{{ .Values.images.helmController.image }}:v0.12.1'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
          name: manager
          ports:
            - containerPort: 8080
              name: http-prom
            - containerPort: 9440
              name: healthz
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /readyz
              port: healthz
          resources:
            limits:
              cpu: '{{ .Values.resources.helmController.limits.cpu }}'
              memory: '{{ .Values.resources.helmController.limits.memory }}'
            requests:
              cpu: '{{ .Values.resources.helmController.requests.cpu }}'
              memory: '{{ .Values.resources.helmController.requests.memory }}'
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 100
          volumeMounts:
            - mountPath: /tmp
              name: temp
      serviceAccountName: helm-controller
      terminationGracePeriodSeconds: 600
      volumes:
        - emptyDir: {}
          name: temp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: image-automation-controlller
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    control-plane: controller
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: image-automation-controller
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: image-automation-controller
      app.kubernetes.io/instance: '{{ .Release.Name }}'
      app.kubernetes.io/managed-by: '{{ .Release.Service }}'
      app.kubernetes.io/name: '{{ include "name" . }}'
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: image-automation-controller
        app.kubernetes.io/instance: '{{ .Release.Name }}'
        app.kubernetes.io/managed-by: '{{ .Release.Service }}'
        app.kubernetes.io/name: '{{ include "name" . }}'
        app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
        giantswarm.io/service_type: managed
        helm.sh/chart: '{{ include "chart" . }}'
    spec:
      containers:
        - args:
            - --events-addr=http://notification-controller/
            - --watch-all-namespaces
            - --log-level=info
            - --log-encoding=json
            - --enable-leader-election
          env:
            - name: RUNTIME_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: '{{ .Values.images.registry }}/{{ .Values.images.imageAutomationController.image }}:v0.16.0'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
          name: manager
          ports:
            - containerPort: 8080
              name: http-prom
            - containerPort: 9440
              name: healthz
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /readyz
              port: healthz
          resources:
            limits:
              cpu: '{{ .Values.resources.imageAutomationController.limits.cpu }}'
              memory: '{{ .Values.resources.imageAutomationController.limits.memory }}'
            requests:
              cpu: '{{ .Values.resources.imageAutomationController.requests.cpu }}'
              memory: '{{ .Values.resources.imageAutomationController.requests.memory }}'
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 100
          volumeMounts:
            - mountPath: /tmp
              name: temp
      securityContext:
        fsGroup: 1337
      serviceAccountName: image-automation-controller
      terminationGracePeriodSeconds: 10
      volumes:
        - emptyDir: {}
          name: temp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: image-reflector-controller
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    control-plane: controller
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: image-reflector-controller
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: image-reflector-controller
      app.kubernetes.io/instance: '{{ .Release.Name }}'
      app.kubernetes.io/managed-by: '{{ .Release.Service }}'
      app.kubernetes.io/name: '{{ include "name" . }}'
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: image-reflector-controller
        app.kubernetes.io/instance: '{{ .Release.Name }}'
        app.kubernetes.io/managed-by: '{{ .Release.Service }}'
        app.kubernetes.io/name: '{{ include "name" . }}'
        app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
        giantswarm.io/service_type: managed
        helm.sh/chart: '{{ include "chart" . }}'
    spec:
      containers:
        - args:
            - --events-addr=http://notification-controller/
            - --watch-all-namespaces
            - --log-level=info
            - --log-encoding=json
            - --enable-leader-election
          env:
            - name: RUNTIME_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: '{{ .Values.images.registry }}/{{ .Values.images.imageReflectorController.image }}:v0.13.0'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
          name: manager
          ports:
            - containerPort: 8080
              name: http-prom
            - containerPort: 9440
              name: healthz
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /readyz
              port: healthz
          resources:
            limits:
              cpu: '{{ .Values.resources.imageReflectorController.limits.cpu }}'
              memory: '{{ .Values.resources.imageReflectorController.limits.memory }}'
            requests:
              cpu: '{{ .Values.resources.imageReflectorController.requests.cpu }}'
              memory: '{{ .Values.resources.imageReflectorController.requests.memory }}'
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 100
          volumeMounts:
            - mountPath: /tmp
              name: temp
            - mountPath: /data
              name: data
      securityContext:
        fsGroup: 1337
      serviceAccountName: image-reflector-controller
      terminationGracePeriodSeconds: 10
      volumes:
        - emptyDir: {}
          name: temp
        - emptyDir: {}
          name: data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kustomize-controller
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    control-plane: controller
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: kustomize-controller
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kustomize-controller
      app.kubernetes.io/instance: '{{ .Release.Name }}'
      app.kubernetes.io/managed-by: '{{ .Release.Service }}'
      app.kubernetes.io/name: '{{ include "name" . }}'
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: kustomize-controller
        app.kubernetes.io/instance: '{{ .Release.Name }}'
        app.kubernetes.io/managed-by: '{{ .Release.Service }}'
        app.kubernetes.io/name: '{{ include "name" . }}'
        app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
        giantswarm.io/service_type: managed
        helm.sh/chart: '{{ include "chart" . }}'
    spec:
      containers:
        - args:
            - --events-addr=http://notification-controller/
            - --watch-all-namespaces
            - --log-level=info
            - --log-encoding=json
            - --enable-leader-election
          env:
            - name: RUNTIME_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: '{{ .Values.images.registry }}/{{ .Values.images.kustomizeController.image }}:v0.16.0'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
          name: manager
          ports:
            - containerPort: 8080
              name: http-prom
            - containerPort: 9440
              name: healthz
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /readyz
              port: healthz
          resources:
            limits:
              cpu: '{{ .Values.resources.kustomizeController.limits.cpu }}'
              memory: '{{ .Values.resources.kustomizeController.limits.memory }}'
            requests:
              cpu: '{{ .Values.resources.kustomizeController.requests.cpu }}'
              memory: '{{ .Values.resources.kustomizeController.requests.memory }}'
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 100
          volumeMounts:
            - mountPath: /tmp
              name: temp
      securityContext:
        fsGroup: 1337
      serviceAccountName: kustomize-controller
      terminationGracePeriodSeconds: 60
      volumes:
        - emptyDir: {}
          name: temp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: notification-controller
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    control-plane: controller
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: notification-controller
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notification-controller
      app.kubernetes.io/instance: '{{ .Release.Name }}'
      app.kubernetes.io/managed-by: '{{ .Release.Service }}'
      app.kubernetes.io/name: '{{ include "name" . }}'
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: notification-controller
        app.kubernetes.io/instance: '{{ .Release.Name }}'
        app.kubernetes.io/managed-by: '{{ .Release.Service }}'
        app.kubernetes.io/name: '{{ include "name" . }}'
        app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
        giantswarm.io/service_type: managed
        helm.sh/chart: '{{ include "chart" . }}'
    spec:
      containers:
        - args:
            - --watch-all-namespaces
            - --log-level=info
            - --log-encoding=json
            - --enable-leader-election
          env:
            - name: RUNTIME_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: '{{ .Values.images.registry }}/{{ .Values.images.notificationController.image }}:v0.18.1'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
          name: manager
          ports:
            - containerPort: 9090
              name: http
            - containerPort: 9292
              name: http-webhook
            - containerPort: 8080
              name: http-prom
            - containerPort: 9440
              name: healthz
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /readyz
              port: healthz
          resources:
            limits:
              cpu: '{{ .Values.resources.notificationController.limits.cpu }}'
              memory: '{{ .Values.resources.notificationController.limits.memory }}'
            requests:
              cpu: '{{ .Values.resources.notificationController.requests.cpu }}'
              memory: '{{ .Values.resources.notificationController.requests.memory }}'
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 100
          volumeMounts:
            - mountPath: /tmp
              name: temp
      serviceAccountName: notification-controller
      terminationGracePeriodSeconds: 10
      volumes:
        - emptyDir: {}
          name: temp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: source-controller
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    control-plane: controller
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: source-controller
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: source-controller
      app.kubernetes.io/instance: '{{ .Release.Name }}'
      app.kubernetes.io/managed-by: '{{ .Release.Service }}'
      app.kubernetes.io/name: '{{ include "name" . }}'
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: source-controller
        app.kubernetes.io/instance: '{{ .Release.Name }}'
        app.kubernetes.io/managed-by: '{{ .Release.Service }}'
        app.kubernetes.io/name: '{{ include "name" . }}'
        app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
        giantswarm.io/service_type: managed
        helm.sh/chart: '{{ include "chart" . }}'
    spec:
      containers:
        - args:
            - --events-addr=http://notification-controller/
            - --watch-all-namespaces
            - --log-level=info
            - --log-encoding=json
            - --enable-leader-election
            - --storage-path=/data
            - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
          env:
            - name: RUNTIME_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: '{{ .Values.images.registry }}/{{ .Values.images.sourceController.image }}:v0.17.1'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
          name: manager
          ports:
            - containerPort: 9090
              name: http
            - containerPort: 8080
              name: http-prom
            - containerPort: 9440
              name: healthz
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: '{{ .Values.resources.sourceController.limits.cpu }}'
              memory: '{{ .Values.resources.sourceController.limits.memory }}'
            requests:
              cpu: '{{ .Values.resources.sourceController.requests.cpu }}'
              memory: '{{ .Values.resources.sourceController.requests.memory }}'
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 100
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /tmp
              name: tmp
      securityContext:
        fsGroup: 1337
      serviceAccountName: source-controller
      terminationGracePeriodSeconds: 10
      volumes:
        - emptyDir: {}
          name: data
        - emptyDir: {}
          name: tmp
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: allow-egress
  namespace: '{{ .Release.Namespace }}'
spec:
  egress:
    - {}
  ingress:
    - from:
        - podSelector: {}
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: allow-scraping
  namespace: '{{ .Release.Namespace }}'
spec:
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
          protocol: TCP
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: '{{ .Release.Name }}'
      app.kubernetes.io/managed-by: '{{ .Release.Service }}'
      app.kubernetes.io/name: '{{ include "name" . }}'
  policyTypes:
    - Egress
    - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "name" . }}'
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    giantswarm.io/service_type: managed
    helm.sh/chart: '{{ include "chart" . }}'
  name: allow-webhooks
  namespace: '{{ .Release.Namespace }}'
spec:
  ingress:
    - from:
        - namespaceSelector: {}
  podSelector:
    matchLabels:
      app: notification-controller
      app.kubernetes.io/instance: '{{ .Release.Name }}'
      app.kubernetes.io/managed-by: '{{ .Release.Service }}'
      app.kubernetes.io/name: '{{ include "name" . }}'
  policyTypes:
    - Ingress
